version: '3.8'

services:

  postgres:
    image: postgres:17
    ports:
      - 5433:5432
    env_file: ./envs/.env.${ENV}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:
      - POSTGRES_USER=${POSTGRES_ADMIN_USER}
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASSWORD}
      - ENV=${ENV} 
    networks:
      - instapay-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_ADMIN_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./services/frontend/mini-instapay
      dockerfile: Dockerfile
    image: instapay/frontend:${ENV}
    ports:
      - "5173:5173"  
    networks:
      - instapay-net
    depends_on:
      - user-service
      - transaction-service
      - reporting-service
    environment:
      # - VITE_API_URL=${VITE_API_URL}
      - NODE_ENV=${NODE_ENV}
    env_file:
      - ./envs/.env.dev

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    image: instapay/user-service:${ENV}
    ports:
      - "3001:3001"
    env_file: ./envs/.env.${ENV}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - instapay-net
    environment:
      - DB_HOST=${DB_HOST} 
      - DB_NAME=user-service-${ENV}
      - DB_NAME_USER_SERVICE=user-service-${ENV}
      - NODE_ENV=${ENV}

  transaction-service:
    build:
      context: ./services/transaction-service
      dockerfile: Dockerfile
    image: instapay/transaction-service:${ENV}
    ports:
      - "3002:3002"
    env_file: ./envs/.env.${ENV}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - instapay-net
    environment:
      - DB_HOST=${DB_HOST}
      - DB_NAME=transaction-service-${ENV}
      - DB_NAME_TRANSACTION_SERVICE=transaction-service-${ENV}
      - NODE_ENV=${ENV}

  reporting-service:
    build:
      context: ./services/reporting-service
      dockerfile: Dockerfile
    image: instapay/reporting-service:${ENV}
    ports:
      - "3003:3003"
    env_file: ./envs/.env.${ENV}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - instapay-net
    environment:
      - DB_HOST=${DB_HOST}
      - DB_NAME=reporting-service-${ENV}
      - DB_NAME_REPORTING_SERVICE=reporting-service-${ENV}
      - NODE_ENV=${ENV}

  user-service-migrations:
    build: ./services/user-service
    env_file: ./envs/.env.${ENV}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - instapay-net
    environment:
      - DB_HOST=${DB_HOST} 
      - DB_NAME=user-service-${ENV}
      - DB_NAME_USER_SERVICE=user-service-${ENV}
      - NODE_ENV=${ENV}
    command: npx sequelize-cli db:migrate --env ${ENV} --config /app/config/config.js

  transaction-service-migrations:
    build: ./services/transaction-service
    env_file: ./envs/.env.${ENV}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - instapay-net
    environment:
      - DB_HOST=${DB_HOST}
      - DB_NAME=transaction-service-${ENV}
      - DB_NAME_TRANSACTION_SERVICE=transaction-service-${ENV}
      - NODE_ENV=${ENV}
    command: npx sequelize-cli db:migrate --env ${ENV} --config /app/config/config.js

  reporting-service-migrations:
    build: ./services/reporting-service
    env_file: ./envs/.env.${ENV}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - instapay-net
    environment:
      - DB_HOST=${DB_HOST}
      - DB_NAME=reporting-service-${ENV}
      - DB_NAME_REPORTING_SERVICE=reporting-service-${ENV}
      - NODE_ENV=${ENV}
    command: npx sequelize-cli db:migrate --env ${ENV} --config /app/config/config.js

volumes:
  postgres_data:

networks:
  instapay-net:
    driver: bridge